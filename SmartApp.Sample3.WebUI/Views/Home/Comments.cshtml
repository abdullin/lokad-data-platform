@using Platform
@using SmartApp.Sample3.WebUI
@model Tuple<SmartApp.Sample3.Contracts.CommentDistributionView, SmartApp.Sample3.Contracts.ProcessingInfoView>

@{
        double speed = 0;
        if (Model != null)
        {
            speed = (Model.Item2.NextOffsetInBytes - Model.Item2.LastOffsetInBytes)/(DateTime.UtcNow - Model.Item2.DateProcessingUtc).TotalSeconds;
        }
}

<h2 class="page-header">Comments projection</h2>
<dl class="dl-horizontal">
    <dt>Events proccessed:</dt>
    <dd>@(Model != null ? Model.Item2.EventsProcessed : 0)</dd>

    <dt>Bytes proccessed:</dt>
    <dd>@FormatUtil.SizeInBytes(Model != null ? Model.Item2.NextOffsetInBytes : 0) (@FormatEvil.SpeedInBytes(speed))</dd>

    <dt>Date</dt>
    <dd>@DateTime.Now</dd>
</dl>

<table class="table table-striped table-condensed table-bordered">
    <tr>
        <th>User</th>
        <th>Number of comments</th>
    </tr>
    @if (Model != null)
    {
        foreach (var pair in Model.Item1.Distribution.OrderByDescending(x => Model.Item1.Users.ContainsKey(x.Key)?Model.Item1.Users[x.Key].Reputation:0).Take(15))
        {
            <tr>
                <td>@(Model.Item1.Users.ContainsKey(pair.Key) ? Model.Item1.Users[pair.Key].Name : pair.Key.ToString()) <span class="badge badge-success pull-right">@(Model.Item1.Users.ContainsKey(pair.Key)?Model.Item1.Users[pair.Key].Reputation:0)</span></td>
                <td>@pair.Value</td>
            </tr>
        }
    }
</table>
<br style="clear: both" />